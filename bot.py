import os
import sys
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
conn = sqlite3.connect("database.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    language TEXT DEFAULT 'ru'
);
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS complaints (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    complaint_text TEXT
);
""")
conn.commit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_ID = 6111969965  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID
TOKEN = "7591135321:AAHZ-wpQ5_MrmRlItWw9Y479ALHvNZLhSqs"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ComplaintState(StatesGroup):
    waiting_for_text = State()

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
texts = {
    "greeting": {
        "ru": "\U0001F916 –ü—Ä–∏–≤–µ—Ç! –Ø DreamFlowAI_X ‚Äì –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n\U0001F30D –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
        "en": "\U0001F916 Hello! I am DreamFlowAI_X ‚Äì your AI-based assistant.\n\n\U0001F30D Choose a language to continue:"
    },
    "language_changed": {
        "ru": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª ‚¨áÔ∏è",
        "en": "‚úÖ Language changed to English! Choose the section you need ‚¨áÔ∏è"
    },
    "faq": {
        "ru": (
            "üìå *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
            "1Ô∏è‚É£ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?*\n"
            "‚Äî –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
            "2Ô∏è‚É£ *–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç?*\n"
            "‚Äî –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "3Ô∏è‚É£ *–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞?*\n"
            "‚Äî –ù–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.\n\n"
            "4Ô∏è‚É£ *–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?*\n"
            "‚Äî –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìù –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\".\n\n"
            "5Ô∏è‚É£ *–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å?*\n"
            "‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∏ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
            "6Ô∏è‚É£ *–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã?*\n"
            "‚Äî –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç DreamFlow AI –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n\n"
            "7Ô∏è‚É£ *–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤?*\n"
            "‚Äî –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /balance."
        ),
        "en": (
            "üìå *Frequently Asked Questions:*\n\n"
            "1Ô∏è‚É£ *How to use the bot?*\n"
            "‚Äî Just use the menu buttons for navigation.\n\n"
            "2Ô∏è‚É£ *What features does the bot support?*\n"
            "‚Äî The bot can answer questions, assist with tasks, and execute commands.\n\n"
            "3Ô∏è‚É£ *How to change the bot language?*\n"
            "‚Äî Press /start and select a language.\n\n"
            "4Ô∏è‚É£ *How to contact support?*\n"
            "‚Äî You can submit a complaint or suggestion in the \"üìù Submit a Complaint/Suggestion\" section.\n\n"
            "5Ô∏è‚É£ *How to delete my account?*\n"
            "‚Äî Contact support, and we will process your request.\n\n"
            "6Ô∏è‚É£ *How to buy tokens?*\n"
            "‚Äî Go to the DreamFlow AI website and choose a payment method.\n\n"
            "7Ô∏è‚É£ *How to check my token balance?*\n"
            "‚Äî Use the command /balance."
        )
    },
    "complaint_prompt": {
        "ru": "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        "en": "You can submit your complaint or suggestion by clicking the button below."
    },
    "complaint_request": {
        "ru": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
        "en": "üìù Please describe your complaint or suggestion:"
    },
    "complaint_saved": {
        "ru": "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
        "en": "‚úÖ Your message has been saved! Thank you for your feedback."
    },
    "new_complaint": {
        "ru": "üì© –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç @{user} (ID: {user_id}):\n{text}",
        "en": "üì© New complaint from @{user} (ID: {user_id}):\n{text}"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá¨üáß English")]],
    resize_keyboard=True
)

keyboards = {
    "ru": ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    ),
    "en": ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùì Frequently Asked Questions")],
            [KeyboardButton(text="üìù Submit a Complaint/Suggestion")]
        ],
        resize_keyboard=True
    )
}

complaint_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úâ –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="leave_complaint")]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_language(user_id):
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
    lang = cursor.fetchone()
    return lang[0] if lang else "ru"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"
    first_name = message.from_user.first_name or "NoName"

    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                   (user_id, username, first_name))
    conn.commit()

    lang = get_user_language(user_id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    greeting_text = (
        f"{texts['greeting']['ru']}\n\n"
        f"{texts['greeting']['en']}"
    )

    await message.answer(greeting_text, reply_markup=lang_keyboard)

@dp.message(F.text.in_(["üìù –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üìù Submit a Complaint/Suggestion"]))
async def complaint_menu(message: Message):
    lang = get_user_language(message.from_user.id)
    complaint_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâ –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" if lang == "ru" else "‚úâ Submit a Complaint/Suggestion", callback_data="leave_complaint")]
        ]
    )
    await message.answer(texts["complaint_prompt"][lang], reply_markup=complaint_keyboard)

@dp.message(F.text.in_(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]))
async def change_language(message: Message):
    user_id = message.from_user.id
    lang = "ru" if message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π" else "en"
    cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (lang, user_id))
    conn.commit()
    await message.answer(texts["language_changed"][lang], reply_markup=keyboards[lang])

@dp.message(F.text.in_(["‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "‚ùì Frequently Asked Questions"]))
async def faq(message: Message):
    lang = get_user_language(message.from_user.id)
    await message.answer(texts["faq"][lang])

@dp.message(F.text.in_(["üìù –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üìù Submit a Complaint/Suggestion"]))
async def complaint_menu(message: Message):
    lang = get_user_language(message.from_user.id)
    await message.answer(texts["complaint_prompt"][lang], reply_markup=complaint_keyboard)

@dp.callback_query(F.data == "leave_complaint")
async def ask_for_complaint(callback: CallbackQuery, state: FSMContext):
    lang = get_user_language(callback.from_user.id)
    await callback.message.answer(texts["complaint_request"][lang])
    await state.set_state(ComplaintState.waiting_for_text)

@dp.message(ComplaintState.waiting_for_text)
async def receive_complaint(message: Message, state: FSMContext):
    user_id = message.from_user.id
    complaint_text = message.text
    lang = get_user_language(user_id)
    cursor.execute("INSERT INTO complaints (user_id, complaint_text) VALUES (?, ?)", (user_id, complaint_text))
    conn.commit()
    await message.answer(texts["complaint_saved"][lang])
    await bot.send_message(ADMIN_ID, texts["new_complaint"][lang].format(user=message.from_user.username, user_id=user_id, text=complaint_text))
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())